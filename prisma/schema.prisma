generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Analysis {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  repository_url String
  code_quality   Int
  bugs_found     Int
  recommendations String[]
  code_structure String   @db.Text
  performance    String   @db.Text
  security       String   @db.Text
  best_practices String   @db.Text
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
}

model Repository {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  owner        String
  url          String
  lastAnalyzed DateTime?
  status       String
  score        Int?
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
}   

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  email       String       @unique
  password    String
  repositories Repository[]
  analyses    Analysis[]
  sessions    Session[]
  tokens      Token[]
  githubTokens GitHubToken[]
  githubUsers  GitHubUser[]
}
  
model Session {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User @relation(fields: [userId], references: [id])
}   

model Token {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User @relation(fields: [userId], references: [id])
  token     String
}   

model GitHubToken {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User @relation(fields: [userId], references: [id])
  token     String
}

model GitHubUser {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User @relation(fields: [userId], references: [id])
  token     String
  name      String
  avatarUrl String
}
  